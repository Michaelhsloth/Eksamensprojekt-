@page "/OpretVagt"
@using hackerbooking.Shared;
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<PageTitle>Opret Vagter</PageTitle>

<!--Check om bruger er logget ind-->
<!--Hvis de er tjek om de har adgang-->
<!--Hvis adgang vis data-->
@if (frivillige == null)
{
    <p>Loading...</p>
}
else if (frivillige[0].koordinator == false)
{
    <p>Du har ikke adgang til denne side</p>
}
else
{
    <span>
        Opgave:
        @foreach (var item in opgaver)
        {
            <br>
            <input type="radio" id="@item.opgave_navn" name="opgaver" value=@item.opgave_navn @onchange="@(() => UpdateOpgave(@item.opgave_navn))">
            <label for="html">@item.opgave_navn</label>
            <button @onclick="@(() => DeleteOpgave(@item.opgave_id))">Slet</button>
        }
        <br>
        <label>Opret Ny Opgave</label>
        <input @bind-value="opgave.opgave_navn" placeholder="string" />
        <button class="btn btn-sm btn-primary" @onclick="@(()=>CreateOpgave())">Opret Opgave</button>
    </span>
    <br />
    <span>Start Tidspunkt: </span>
    <input type="datetime-local" @bind-value="vagt.dato_tid_start" placeholder="DateTime" />
    <br />
    <span>Slut Tidspunkt: </span>
    <input type="datetime-local" @bind-value="vagt.dato_tid_slut" placeholder="DateTime" />
    <button class="btn btn-sm btn-primary" @onclick="@(()=>CreateVagt(@vagt))">Opret Vagt</button>
    <p>Liste over entries</p>
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Opgave</th>
                <th>Start</th>
                <th>Slut</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in vagter)
            {
                <tr>
                    <td>@item.opgave_navn</td>
                    <td>@item.dato_tid_start</td>
                    <td>@item.dato_tid_slut</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="@(()=>Toggle(@item.vagt_id))">Edit</button>
                        <button class="btn btn-sm btn-primary" @onclick="@(()=>DeleteVagt(@item.vagt_id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <!--vis div hvis der bliver trykket på "Edit" for de enkelte vagter-->
    <div hidden="@HideLabel">
        <span>
            Opgave:
            @foreach (var item in opgaver)
            {
                <br>
                <input type="radio" id="@item.opgave_navn" name="editOpgaver" value=@item.opgave_navn @onchange="@(() => UpdateEditOpgave(@item.opgave_navn))">
                <label for="html">@item.opgave_navn</label>
            }
            <br />
        </span>
        <span>Start Tidspunkt: </span>
        <input type="datetime-local" @bind-value="@vagt.dato_tid_start" placeholder="DateTime" />
        <br />
        <span>Slut Tidspunkt: </span>
        <input type="datetime-local" @bind-value="@vagt.dato_tid_slut" placeholder="DateTime" />
        <button class="btn btn-sm btn-primary" @onclick="@(()=>UpdateVagt())">Edit</button>
    </div>
}

@code {
    private VagterDTO[] vagter;
    private OpgaverDTO[] opgaver;
    private FrivilligeDTO[] frivillige;

    private VagterDTO vagt = new();
    private OpgaverDTO opgave = new();

    private string tempOpgave;
    private string tempEditOpgave;

    private int tempId;
    private int id;

    private bool HideLabel { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        // Hent data
        vagter = await Http.GetFromJsonAsync<VagterDTO[]>("api/Vagter");
        opgaver = await Http.GetFromJsonAsync<OpgaverDTO[]>("api/Opgaver");

        // Hent id fra browser
        id = await localStorage.GetItemAsync<int>("id");
        // Hent frivillig med id
        frivillige = await Http.GetFromJsonAsync<FrivilligeDTO[]>($"api/FindFrivillig{id}");
    }
    private async Task DeleteVagt(int id)
    {
        await Http.DeleteAsync($"api/Vagt/{id}");
        await OnInitializedAsync();
    }

    private async Task CreateVagt(VagterDTO vagt)
    {
        var nyVagt = vagt;
        nyVagt.opgave_navn = tempOpgave;
        await Http.PostAsJsonAsync<VagterDTO>("api/Vagt", nyVagt);
        await OnInitializedAsync();
    }
    private async Task UpdateVagt()
    {
        var nyEditVagt = vagt;
        nyEditVagt.opgave_navn = tempEditOpgave;
        nyEditVagt.vagt_id = tempId;
        await Http.PutAsJsonAsync<VagterDTO>($"api/Vagt/{nyEditVagt.vagt_id}", nyEditVagt);
        await OnInitializedAsync();
    }

    private void UpdateOpgave(string input)
    {
        tempOpgave = input;
    }

    private void UpdateEditOpgave(string input)
    {
        tempEditOpgave = input;
    }

    private async Task CreateOpgave()
    {
        await Http.PostAsJsonAsync<OpgaverDTO>("api/nyOpgave", opgave);
        await OnInitializedAsync();
    }

    private async Task DeleteOpgave(int id)
    {
        await Http.DeleteAsync($"api/Opgave/{id}");
        await OnInitializedAsync();
    }

    private void Toggle(int id)
    {
        tempId = id;
        HideLabel = !HideLabel;
    }
}